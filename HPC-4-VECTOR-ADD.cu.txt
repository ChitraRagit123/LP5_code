
#include <stdio.h>
#include <cuda.h>

__global__ void vectorAddition(float *A, float *B, float *C, int N) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;

    if (i < N * N) {
        C[i] = A[i] + B[i];
    }
}

int main() {
    int N = 2;
    size_t size = N * N * sizeof(float);

    float A[] = {1, 2, 3, 4};    // 2x2 Matrix (flattened)
    float B[] = {5, 6, 7, 8};    // 2x2 Matrix (flattened)
    float C[4];                  // Resultant Matrix

    float *d_A, *d_B, *d_C;

    // Allocate device memory
    cudaMalloc((void **)&d_A, size);
    cudaMalloc((void **)&d_B, size);
    cudaMalloc((void **)&d_C, size);

    // Copy inputs to device
    cudaMemcpy(d_A, A, size, cudaMemcpyHostToDevice);
    cudaMemcpy(d_B, B, size, cudaMemcpyHostToDevice);

    // Configure execution
    int totalThreads = N * N;
    int threadsPerBlock = 256;
    int numBlocks = (totalThreads + threadsPerBlock - 1) / threadsPerBlock;

    vectorAddition<<<numBlocks, threadsPerBlock>>>(d_A, d_B, d_C, N);

    // Copy result back to host
    cudaMemcpy(C, d_C, size, cudaMemcpyDeviceToHost);

    // Print result
    printf("Resultant Matrix C:\n");
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            printf("%f ", C[i * N + j]);
        }
        printf("\n");
    }

    // Free device memory
    cudaFree(d_A);
    cudaFree(d_B);
    cudaFree(d_C);

    return 0;
}
